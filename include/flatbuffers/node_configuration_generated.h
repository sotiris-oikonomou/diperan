// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NODECONFIGURATION_DIPERAN_CONFIGURATION_H_
#define FLATBUFFERS_GENERATED_NODECONFIGURATION_DIPERAN_CONFIGURATION_H_

#include "flatbuffers/flatbuffers.h"

namespace Diperan {
namespace Configuration {

struct Options;

struct Options FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USED_PAPI_EVENT_CODES = 4,
    VT_BENCHMARK_WARMUP = 6,
    VT_BENCHMARK_BUFFER_SIZE = 8,
    VT_INCOMING_QUEUE_LENGTH = 10,
    VT_OUTGOING_QUEUE_LENGTH = 12
  };
  const flatbuffers::Vector<int32_t> *used_papi_event_codes() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_USED_PAPI_EVENT_CODES);
  }
  uint32_t benchmark_warmup() const {
    return GetField<uint32_t>(VT_BENCHMARK_WARMUP, 0);
  }
  uint32_t benchmark_buffer_size() const {
    return GetField<uint32_t>(VT_BENCHMARK_BUFFER_SIZE, 0);
  }
  uint32_t incoming_queue_length() const {
    return GetField<uint32_t>(VT_INCOMING_QUEUE_LENGTH, 0);
  }
  uint32_t outgoing_queue_length() const {
    return GetField<uint32_t>(VT_OUTGOING_QUEUE_LENGTH, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USED_PAPI_EVENT_CODES) &&
           verifier.VerifyVector(used_papi_event_codes()) &&
           VerifyField<uint32_t>(verifier, VT_BENCHMARK_WARMUP) &&
           VerifyField<uint32_t>(verifier, VT_BENCHMARK_BUFFER_SIZE) &&
           VerifyField<uint32_t>(verifier, VT_INCOMING_QUEUE_LENGTH) &&
           VerifyField<uint32_t>(verifier, VT_OUTGOING_QUEUE_LENGTH) &&
           verifier.EndTable();
  }
};

struct OptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_used_papi_event_codes(flatbuffers::Offset<flatbuffers::Vector<int32_t>> used_papi_event_codes) {
    fbb_.AddOffset(Options::VT_USED_PAPI_EVENT_CODES, used_papi_event_codes);
  }
  void add_benchmark_warmup(uint32_t benchmark_warmup) {
    fbb_.AddElement<uint32_t>(Options::VT_BENCHMARK_WARMUP, benchmark_warmup, 0);
  }
  void add_benchmark_buffer_size(uint32_t benchmark_buffer_size) {
    fbb_.AddElement<uint32_t>(Options::VT_BENCHMARK_BUFFER_SIZE, benchmark_buffer_size, 0);
  }
  void add_incoming_queue_length(uint32_t incoming_queue_length) {
    fbb_.AddElement<uint32_t>(Options::VT_INCOMING_QUEUE_LENGTH, incoming_queue_length, 0);
  }
  void add_outgoing_queue_length(uint32_t outgoing_queue_length) {
    fbb_.AddElement<uint32_t>(Options::VT_OUTGOING_QUEUE_LENGTH, outgoing_queue_length, 0);
  }
  explicit OptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OptionsBuilder &operator=(const OptionsBuilder &);
  flatbuffers::Offset<Options> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Options>(end);
    return o;
  }
};

inline flatbuffers::Offset<Options> CreateOptions(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> used_papi_event_codes = 0,
    uint32_t benchmark_warmup = 0,
    uint32_t benchmark_buffer_size = 0,
    uint32_t incoming_queue_length = 0,
    uint32_t outgoing_queue_length = 0) {
  OptionsBuilder builder_(_fbb);
  builder_.add_outgoing_queue_length(outgoing_queue_length);
  builder_.add_incoming_queue_length(incoming_queue_length);
  builder_.add_benchmark_buffer_size(benchmark_buffer_size);
  builder_.add_benchmark_warmup(benchmark_warmup);
  builder_.add_used_papi_event_codes(used_papi_event_codes);
  return builder_.Finish();
}

inline flatbuffers::Offset<Options> CreateOptionsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *used_papi_event_codes = nullptr,
    uint32_t benchmark_warmup = 0,
    uint32_t benchmark_buffer_size = 0,
    uint32_t incoming_queue_length = 0,
    uint32_t outgoing_queue_length = 0) {
  return Diperan::Configuration::CreateOptions(
      _fbb,
      used_papi_event_codes ? _fbb.CreateVector<int32_t>(*used_papi_event_codes) : 0,
      benchmark_warmup,
      benchmark_buffer_size,
      incoming_queue_length,
      outgoing_queue_length);
}

inline const Diperan::Configuration::Options *GetOptions(const void *buf) {
  return flatbuffers::GetRoot<Diperan::Configuration::Options>(buf);
}

inline const Diperan::Configuration::Options *GetSizePrefixedOptions(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Diperan::Configuration::Options>(buf);
}

inline bool VerifyOptionsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Diperan::Configuration::Options>(nullptr);
}

inline bool VerifySizePrefixedOptionsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Diperan::Configuration::Options>(nullptr);
}

inline void FinishOptionsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Diperan::Configuration::Options> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOptionsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Diperan::Configuration::Options> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Configuration
}  // namespace Diperan

#endif  // FLATBUFFERS_GENERATED_NODECONFIGURATION_DIPERAN_CONFIGURATION_H_
