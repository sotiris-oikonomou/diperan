// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BENCHMARKRESULTS_DIPERAN_BENCHMARK_RESULTS_H_
#define FLATBUFFERS_GENERATED_BENCHMARKRESULTS_DIPERAN_BENCHMARK_RESULTS_H_

#include "flatbuffers/flatbuffers.h"

namespace Diperan {
namespace Benchmark {
namespace Results {

struct EventResult;

struct BenchmarkResults;

struct EventResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENT_CODE = 4,
    VT_EVENT_VALUE = 6
  };
  int32_t event_code() const {
    return GetField<int32_t>(VT_EVENT_CODE, 0);
  }
  int64_t event_value() const {
    return GetField<int64_t>(VT_EVENT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_EVENT_CODE) &&
           VerifyField<int64_t>(verifier, VT_EVENT_VALUE) &&
           verifier.EndTable();
  }
};

struct EventResultBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_event_code(int32_t event_code) {
    fbb_.AddElement<int32_t>(EventResult::VT_EVENT_CODE, event_code, 0);
  }
  void add_event_value(int64_t event_value) {
    fbb_.AddElement<int64_t>(EventResult::VT_EVENT_VALUE, event_value, 0);
  }
  explicit EventResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EventResultBuilder &operator=(const EventResultBuilder &);
  flatbuffers::Offset<EventResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EventResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<EventResult> CreateEventResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t event_code = 0,
    int64_t event_value = 0) {
  EventResultBuilder builder_(_fbb);
  builder_.add_event_value(event_value);
  builder_.add_event_code(event_code);
  return builder_.Finish();
}

struct BenchmarkResults FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENTS_RESULTS = 4,
    VT_CLOCK_CYCLES = 6,
    VT_MICROSECONDS = 8,
    VT_BENCHMARK_TYPE = 10
  };
  const flatbuffers::Vector<flatbuffers::Offset<EventResult>> *events_results() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<EventResult>> *>(VT_EVENTS_RESULTS);
  }
  int64_t clock_cycles() const {
    return GetField<int64_t>(VT_CLOCK_CYCLES, 0);
  }
  int64_t microseconds() const {
    return GetField<int64_t>(VT_MICROSECONDS, 0);
  }
  const flatbuffers::String *benchmark_type() const {
    return GetPointer<const flatbuffers::String *>(VT_BENCHMARK_TYPE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTS_RESULTS) &&
           verifier.VerifyVector(events_results()) &&
           verifier.VerifyVectorOfTables(events_results()) &&
           VerifyField<int64_t>(verifier, VT_CLOCK_CYCLES) &&
           VerifyField<int64_t>(verifier, VT_MICROSECONDS) &&
           VerifyOffset(verifier, VT_BENCHMARK_TYPE) &&
           verifier.VerifyString(benchmark_type()) &&
           verifier.EndTable();
  }
};

struct BenchmarkResultsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_events_results(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EventResult>>> events_results) {
    fbb_.AddOffset(BenchmarkResults::VT_EVENTS_RESULTS, events_results);
  }
  void add_clock_cycles(int64_t clock_cycles) {
    fbb_.AddElement<int64_t>(BenchmarkResults::VT_CLOCK_CYCLES, clock_cycles, 0);
  }
  void add_microseconds(int64_t microseconds) {
    fbb_.AddElement<int64_t>(BenchmarkResults::VT_MICROSECONDS, microseconds, 0);
  }
  void add_benchmark_type(flatbuffers::Offset<flatbuffers::String> benchmark_type) {
    fbb_.AddOffset(BenchmarkResults::VT_BENCHMARK_TYPE, benchmark_type);
  }
  explicit BenchmarkResultsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BenchmarkResultsBuilder &operator=(const BenchmarkResultsBuilder &);
  flatbuffers::Offset<BenchmarkResults> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BenchmarkResults>(end);
    return o;
  }
};

inline flatbuffers::Offset<BenchmarkResults> CreateBenchmarkResults(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EventResult>>> events_results = 0,
    int64_t clock_cycles = 0,
    int64_t microseconds = 0,
    flatbuffers::Offset<flatbuffers::String> benchmark_type = 0) {
  BenchmarkResultsBuilder builder_(_fbb);
  builder_.add_microseconds(microseconds);
  builder_.add_clock_cycles(clock_cycles);
  builder_.add_benchmark_type(benchmark_type);
  builder_.add_events_results(events_results);
  return builder_.Finish();
}

inline flatbuffers::Offset<BenchmarkResults> CreateBenchmarkResultsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<EventResult>> *events_results = nullptr,
    int64_t clock_cycles = 0,
    int64_t microseconds = 0,
    const char *benchmark_type = nullptr) {
  return Diperan::Benchmark::Results::CreateBenchmarkResults(
      _fbb,
      events_results ? _fbb.CreateVector<flatbuffers::Offset<EventResult>>(*events_results) : 0,
      clock_cycles,
      microseconds,
      benchmark_type ? _fbb.CreateString(benchmark_type) : 0);
}

inline const Diperan::Benchmark::Results::BenchmarkResults *GetBenchmarkResults(const void *buf) {
  return flatbuffers::GetRoot<Diperan::Benchmark::Results::BenchmarkResults>(buf);
}

inline const Diperan::Benchmark::Results::BenchmarkResults *GetSizePrefixedBenchmarkResults(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Diperan::Benchmark::Results::BenchmarkResults>(buf);
}

inline bool VerifyBenchmarkResultsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Diperan::Benchmark::Results::BenchmarkResults>(nullptr);
}

inline bool VerifySizePrefixedBenchmarkResultsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Diperan::Benchmark::Results::BenchmarkResults>(nullptr);
}

inline void FinishBenchmarkResultsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Diperan::Benchmark::Results::BenchmarkResults> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBenchmarkResultsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Diperan::Benchmark::Results::BenchmarkResults> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Results
}  // namespace Benchmark
}  // namespace Diperan

#endif  // FLATBUFFERS_GENERATED_BENCHMARKRESULTS_DIPERAN_BENCHMARK_RESULTS_H_
