// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EVENTINFO_DIPERAN_EVENT_INFO_H_
#define FLATBUFFERS_GENERATED_EVENTINFO_DIPERAN_EVENT_INFO_H_

#include "flatbuffers/flatbuffers.h"

namespace Diperan {
namespace Event {
namespace Info {

struct Events;

struct Events FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENT_CODES = 4
  };
  const flatbuffers::Vector<int32_t> *event_codes() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_EVENT_CODES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENT_CODES) &&
           verifier.VerifyVector(event_codes()) &&
           verifier.EndTable();
  }
};

struct EventsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_event_codes(flatbuffers::Offset<flatbuffers::Vector<int32_t>> event_codes) {
    fbb_.AddOffset(Events::VT_EVENT_CODES, event_codes);
  }
  explicit EventsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EventsBuilder &operator=(const EventsBuilder &);
  flatbuffers::Offset<Events> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Events>(end);
    return o;
  }
};

inline flatbuffers::Offset<Events> CreateEvents(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> event_codes = 0) {
  EventsBuilder builder_(_fbb);
  builder_.add_event_codes(event_codes);
  return builder_.Finish();
}

inline flatbuffers::Offset<Events> CreateEventsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *event_codes = nullptr) {
  return Diperan::Event::Info::CreateEvents(
      _fbb,
      event_codes ? _fbb.CreateVector<int32_t>(*event_codes) : 0);
}

inline const Diperan::Event::Info::Events *GetEvents(const void *buf) {
  return flatbuffers::GetRoot<Diperan::Event::Info::Events>(buf);
}

inline const Diperan::Event::Info::Events *GetSizePrefixedEvents(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Diperan::Event::Info::Events>(buf);
}

inline bool VerifyEventsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Diperan::Event::Info::Events>(nullptr);
}

inline bool VerifySizePrefixedEventsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Diperan::Event::Info::Events>(nullptr);
}

inline void FinishEventsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Diperan::Event::Info::Events> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEventsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Diperan::Event::Info::Events> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Info
}  // namespace Event
}  // namespace Diperan

#endif  // FLATBUFFERS_GENERATED_EVENTINFO_DIPERAN_EVENT_INFO_H_
